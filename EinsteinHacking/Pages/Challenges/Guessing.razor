@page "/Challenge1/{id:int}"

@using EinsteinHacking.Models
@using EinsteinHacking.Services

@inject NavigationManager Navigate
@inject AuthenticationStateProvider auth
@inject EinsteinHacking.Services.AlertState AlertState
@inject EinsteinHacking.Logic.ChallengeLogic ChallengeLogic
@inject EinsteinHacking.Logic.HintLogic HintLogic
@inject EinsteinHacking.Logic.UserChallengeLogic UserChallengeLogic

<EinsteinHacking.Shared.Html>
    <Content>
        <div class="h-100">
            <div class="card text-center">
                <div class="card-header">
                    Challenge
                </div>
                <div class="card-body">
                    <h1 class="card-title">@challenge.Name</h1>
                    <h3 class="card-subtitle mb-2 text-muted">Introduction</h3>
                    <p class="card-text">@challenge.Description</p>
                    <br />
                    <input @bind-value="@inputValue" disabled="@IsDisabled" class="input-group-lg" type="text" name="passwordsubmit" /> &nbsp;
                    <button type="button" disabled="@IsDisabled" class="btn btn-primary" @onclick=onSubmit>Submit</button>
                    <EinsteinHacking.Shared.Alert Title=@alert.AlertTitle Type=@alert.AlertType>
                        <Content>
                            <strong class="text-nowrap">@alert.AlertMessage</strong>
                        </Content>
                    </EinsteinHacking.Shared.Alert>
                    <br />
                    <br />
                    @if (!status.Equals(Status.Ended))
                    {
                        <div class="accordion" id="HintAccordion">
                            @foreach (Hint hint in hints)
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="@hint.HintID">
                                        <button disabled="@IsDisabled" @onclick="UseHint" class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-@hint.HintID" aria-expanded="false" aria-controls="panelsStayOpen-@hint.HintID">
                                            Hint # @(challenge.Hints.IndexOf(hint) + 1)
                                        </button>
                                    </h2>
                                    <div id="panelsStayOpen-@hint.HintID" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-@hint.HintID">
                                        <div class="accordion-body">
                                            <strong>@hint.Name</strong>
                                            <p>@hint.Description</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <br />
                        <button type="button" class="btn btn-dark" @onclick="NextChallenge">
                            <span class="oi oi-arrow-circle-right" aria-hidden="true"></span> Next Challenge
                        </button>
                    }
                </div>
            </div>
        </div>
    </Content>
</EinsteinHacking.Shared.Html>


@code {
    [Parameter]
    public int id { get; set; }
    protected bool IsDisabled { get; set; }
    public AlertModel alert { get; set; }

    private IEnumerable<Hint> hints;
    private Challenge challenge;
    private Status status;
    private string username;
    private string inputValue;
    private bool canUserUseHint;

    protected override void OnInitialized()
    {
        username = auth.GetAuthenticationStateAsync().Result.User.Identity.Name;
        status = UserChallengeLogic.UserGetChallengeStatus(username, id);
        switch (status)
        {
            case Status.UnTouched:
                UserChallengeLogic.UserStartChallenge(username, id);
                goto case Status.InProgress;
            case Status.InProgress:
                AlertState.SetAlert("neutral");
                challenge = ChallengeLogic.GetChallengeFull(id);
                canUserUseHint = UserChallengeLogic.UserCanUseHint(username, id);
                hints = challenge.Hints;
                break;
            case Status.Ended:
                AlertState.SetAlert("completed");
                IsDisabled = true;
                challenge = ChallengeLogic.GetChallengeLight(id);
                break;
            default:
                break;
        }
        alert = AlertState.GetAlert();
    }

    private void UseHint()
    {
        canUserUseHint = UserChallengeLogic.UserCanUseHint(username, id);
        if (canUserUseHint)
        {
            UserChallengeLogic.UserGetHint(username, id);
            challenge.PointsOnCompletion -= challenge.PointsRemovedPerHintUsed;
        }
    }

    private void onSubmit()
    {
        // todo: compare with saved password of challenge -> not implemented yet
        if (inputValue == "123")
        {
            AlertState.SetAlert("true");
            UserChallengeLogic.UserCompleteChallenge(username, id);
            status = UserChallengeLogic.UserGetChallengeStatus(username, id);
        }
        else
        {
            AlertState.SetAlert("false");
        }
    }

    private void NextChallenge()
    {
        Navigate.NavigateTo($"/Challenge2/{2}");
    }
}
