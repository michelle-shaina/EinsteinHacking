@page "/Challenge7/{id:int}"

@using EinsteinHacking.Models
@using EinsteinHacking.Services
@using EinsteinHacking.Logic;

@inject MarkdownRendererReturner MarkdownReturner
@inject NavigationManager Navigate
@inject AuthenticationStateProvider auth
@inject EinsteinHacking.Services.AlertState AlertState
@inject EinsteinHacking.Logic.ChallengeLogic ChallengeLogic
@inject EinsteinHacking.Logic.HintLogic HintLogic
@inject EinsteinHacking.Logic.UserChallengeLogic UserChallengeLogic
@inject EinsteinHacking.Logic.RuntimeSQL RuntimeSQL


<div class="h-100">
    <div class="card text-center">
        <div class="card-header">
            Challenge
        </div>
        <div class="card-body">
            <h1 class="card-title">@challenge.Name</h1>
            <h3 class="card-subtitle mb-2 text-muted">Introduction</h3>
            <p class="card-text">
                @challengeDescription
            </p>
            <br />
            <input @bind-value="@inputValue" disabled="@IsDisabled" class="input-group-lg" type="text" name="passwordsubmit" /> &nbsp;
            <button type="button" disabled="@IsDisabled" class="btn btn-primary" @onclick=onSubmit>Submit</button>

            <div class="sql-result content">
                <div class="row">
                    @foreach (string n in sqlResult)
                    {
                        <div class="col-6">
                            @if (n.Split(" ").Length > 0)
                            {
                                @n.Split(" ")[0]
                            }
                        </div>
                        <div class="col-6">
                            @if (n.Split(" ").Length > 1)
                            {
                                @n.Split(" ")[1]
                            }
                        </div>
                    }
                </div>
            </div>
            <EinsteinHacking.Shared.Alert Title=@alert.AlertTitle Type=@alert.AlertType>
                <Content>
                    <strong class="text-nowrap">@alert.AlertMessage</strong>
                </Content>
            </EinsteinHacking.Shared.Alert>
            <br />
            <br />
            @if (status.Equals(Status.Ended))
            {
                <br />
                <button type="button" class="btn btn-dark" @onclick="NextChallenge">
                    <span class="oi oi-arrow-circle-right" aria-hidden="true"></span> Next Challenge
                </button>
            }
            else
            {
                //<EinsteinHacking.Pages.Components.NewTestHintView challengeID="@id" />
            }
        </div>
    </div>
    <div class="card text-center">
        <div class="card-body">
            <EinsteinHacking.Pages.Components.NewTestHintView challengeID="@id" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }
    protected bool IsDisabled { get; set; }
    public MarkupString challengeDescription { get; set; }
    public AlertModel alert { get; set; }

    private IEnumerable<Hint> hints;
    private Challenge challenge;
    private Status status;
    private string username;
    private string inputValue;
    private bool canUserUseHint;
    private List<string> sqlResult;

    protected override void OnInitialized()
    {
        username = auth.GetAuthenticationStateAsync().Result.User.Identity.Name;
        status = UserChallengeLogic.UserGetChallengeStatus(username, id);
        switch (status)
        {
            case Status.UnTouched:
                UserChallengeLogic.UserStartChallenge(username, id);
                goto case Status.InProgress;
            case Status.InProgress:
                AlertState.SetAlert("neutral");
                challenge = ChallengeLogic.GetChallengeFull(id);
                canUserUseHint = UserChallengeLogic.UserCanUseHint(username, id);
                hints = challenge.Hints;
                break;
            case Status.Ended:
                AlertState.SetAlert("completed");
                IsDisabled = true;
                challenge = ChallengeLogic.GetChallengeLight(id);
                break;
            default:
                break;
        }
        challengeDescription = MarkdownReturner.GetMarkdown(challenge.Description);
        alert = AlertState.GetAlert();
        sqlResult = new List<string>();
    }

    private void onSubmit()
    {
        try
        {

            if (inputValue == challenge.Solution)
            {
                AlertState.SetAlert("true");
                UserChallengeLogic.UserCompleteChallenge(username, id);
                status = UserChallengeLogic.UserGetChallengeStatus(username, id);
            }
            else
            {
                sqlResult = RuntimeSQL.ExecuteQuery(inputValue);
                if (sqlResult == null)
                    sqlResult = new List<string>();

            }
        }
        catch (Exception ex)
        {

        }
    }

    private void NextChallenge()
    {
        Navigate.NavigateTo($"/Challenge2/{id + 1}");
    }
}
