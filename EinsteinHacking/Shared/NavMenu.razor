
﻿@using EinsteinHacking.Models
@inject AuthenticationStateProvider auth
@inject EinsteinHacking.Logic.ChallengeLogic ChallengeLogic

﻿<div class="top-row pl-4 logo navbar navbar-dark">
    <img class="d-block logo-image" src="../assets/images/Logo/EinsteinHackingLogo.svg" alt="Logo Einsteinhacking">
    <a class="navbar-brand" href="/">EinsteinHacking</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @if (!string.IsNullOrEmpty(username))
        {
            @foreach (var challenge in challenges)
            {
                <li class="nav-item px-3">
                    <NavLink class="@($"nav-link challenge-{challenge.ChallengeID}")" href="@($"/Challenge{challenge.ChallengeID}/{challenge.ChallengeID}")">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> @challenge.Name
                    </NavLink>
                </li>
            }
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private string username;
    private IEnumerable<Challenge> challenges;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        username = auth.GetAuthenticationStateAsync().Result.User.Identity.Name;
        challenges = ChallengeLogic.GetChallenges();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
